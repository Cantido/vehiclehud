{"name":"Vehiclehud","tagline":"Make your car like a fighter jet! But not as fast!","body":"VehicleHUD\r\n==========\r\n\r\nOur senior design project is to build a projected heads-up display for a car\r\nthat is projected on to the windshield. This system will pull vehicle\r\ninformation from the OBD jack located in all modern cars.\r\n\r\nOverall Implementation\r\n----------------------\r\n\r\nThe initial software implementation will have only three steps:\r\n \r\n1. Initialize the serial connection struct\r\n2. Start the serial connection.\r\n3. Enter an infinite loop, displaying speed and RPM periodically.\r\n\r\nAt this point, this program is only an attempt to parse OBD data from the\r\nvehicle. Once the data connection is established, we can begin adding other\r\ncomponents. The data will be reflected on to the windshield with a vacuum\r\nfluorescent display. The light from the dispay will be collimated with either\r\nmirrors or lenses.\r\n\r\nThis prgram will be installed on a Linux-based operating system, most likely a\r\npcDuino running Ubuntu 12.10 or 13.04.\r\n\r\nOBD Communication\r\n-----------------\r\n\r\nWe will use a consumer device to allow us to communicate with the CAN bus\r\nvia Bluetooth. This specific device/protocol may change, but in all likelihood\r\nwe will still be using a serial device, even if it isn't a Bluetooth device.\r\n\r\nSpecifically, we are performing initial testing with an ELM327 OBD to RS232\r\nInterpreter. The serial requirements for the device are as follows:\r\n\r\n* Baud rate: `9600` symbols/sec\r\n* Data bits: `8`\r\n* Parity: `None`\r\n* Stop bits: `1`\r\n* Line end: Carriage return (`'\\r'` or `0x0D`) (input and output)\r\n\r\nA majority of messages will be less than 7 data bytes long. We must send a\r\na signal of `ATAL` to allow longer messages.\r\n\r\n### Initialization\r\n\r\n1. Open a non-blocking, read-write file descriptor, and apply the above\r\nattributes to begin the serial connection.\r\n2. Send the *Reset All* signal, `ATZ`.\r\n3. *Disable Command Echoing* with `ATE0`.\r\n4. Ask the chip to *find a protocol* with `ATSP0`.\r\n\r\nAt this point, we can begin communicating normally.\r\n\r\n### Vehicle Data Queries\r\n\r\nTo request data from the vehicle's systems, we send it a byte string according\r\nto the OBD standard. More information may be found on [Wikipedia](https://en.wikipedia.org/wiki/OBD-II_PIDs \"OBD-II PIDs - Wikipedia, the free encyclopedia\").\r\n\r\nCommands take the form of:\r\n\r\n* First byte: Mode number\r\n* Second byte: PID\r\n\r\nWhen we issue a command (terminated by a carriage return), the device will\r\nrespond with a hex string consisting of:\r\n\r\n* First byte: Mode number + `0x40` to signify a response\r\n* Second byte: Echo of requested PID\r\n* Remaining bytes: Requested data\r\n\r\nAs a prototype implementation, our system will be requesting the speed\r\n(`0x010C`) and RPM (`0x010D`) and printing this information\r\nto the console.\r\n\r\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n\r\nCopyright 2013 Robert Richter and Aaron Hall  \r\nDistributed under the terms of the GNU GPL.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}